Video Recording - Minutes
============================
Part 1:
========
1:40 - 2:13 - Agenda + About
2:13 - 3:02 - What is Openstack ? + Our Build-Up Scope
3:02 - 4:12 - OpenStack Proliferation / Market Position
4:12 - 7:25 - Infra-As-A-Service (IaaS) - Main OpenStack Modules
7:25 - 11:13 - How Services Interact?
    7:50 -   Q1: What is the difference between Cinder & Swift ?
11:13 - 11:43  - Do-it-Yourself Agenda / Expectations of Cloud Building
11:43 - 12:49 - VM Layout
12:49 - 25:33 - VM Setup for Master/Worker Nodes
25:33 - 27:00  - Install OpenStack Repository on all Nodes
27:00 - 27:40 - Define Software stack for Controller Node (MySQL, MemCacheD, RabbitMQ, KeyStone, Glance, Nova)
27:40 - 38:00  - Deployment/Configuration of (MySQL, MemCacheD, RabbitMQ, KeyStone)
38:00 - 41:00 - Testing (MySQL, MemCacheD, RabbitMQ, KeyStone) by creating Projects/Services/Roles/Users 
41:00 - 43:00 - Testing Authentication/Tokenization Issuance from KeyStone
43:00 - 52:00  - (Poll) Openstack Trivia / Discussion
52:00 - 55:00 - Progress Review of 1 hour
55:00 - 1:02 - Q&A

Part2:
=======
0:00 - 1:30   - Review of Current Status - KeyStone Installed/Configured
1:30 - 3:30   - Define Glance Architecutre / Deploy Software stack (Glance)
3:30 - 13:00  - Configure Glance to connect with KeyStone
13:00 - 14:00 - Test / Load one Image to Glance . (failed)
14:00 - 21:00 - Fixing Glance failure / Troubleshooting Logs 
21:00 - 24:00 - Glance Resolution / Test PASS
24:00 - 27:00 - Define Nova Architecture / Deploy Software Stack (Nova)
27:00 - 29:00 - Install Nova DB , Service, Endpoints, User
29:00 - 33:00 - Install Software stack (Nova, Nova-api, Nova conductor ...)
33:00 - 41:00 - Configure Nova to connect with Keystone & Glance
41:00 - 48:00 - Test Nova (Failed)
48:00 - 51:00 - Fixing Nova failure / Troubleshooting Logs 
51:00 - 51:40 - Nova Resolution / Test PASS
51:40 - 59:00 - Install/Configure Compute-Node Agent on Worker Compute Node
1:01:00 - 1:04:00 - Join Worker Compute Node to Master Controller Node
1:04:00 - 1:06:00 - Verification Master/Worker Nodes for Nova
1:06:00 - 1:06:59 - Checkpoints / Conclusion


Episode 2: 
===========
00:00:00 - 00:00:32 - Presenter Background
00:00:32 - 00:05:00 - Quick Trivia
00:05:00 - 00:16:00 - Review of Previous - Cloud Built 
00:16:00 - 00:20:00 - Episode 2 - Coverage: Neutron / Cinder / Horizon
00:19:00 - 00:23:00 - Review of Openstack Services / How they Interact
00:23:00 - 00:25:00 - Episode agenda
00:28:00 - 00:35:00 - Do-It-Yourself - Review of Previous Services / EP1
00:35:00 - 00:42:00 - Build Horizon Dashboard (Django webapp)on apache + mods
00:42:00 - 00:51:00 - Test Horizon Dashboard (GUI)::Create Project/User/Image..etc
00:51:00 - 00:54:00 - Review Networking Center (Neutron)
00:54:00 - 01:00:00 - Build Networking Center (Neutron): Create db, user, role, service, endpoints
01:00:00 - 01:07:00 - Configure Networking Center (Neutron), connect to keystone authentication, Agents Layer2,L3
01:07:00 - 01:11:00 - Configure Networking Center (Neutron) DHCP Agents, Nova glueing/to-accept Neutron
01:11:00 - 01:14:00 - Populate Neutron DB with prev. configs / Restart Nova compound
01:14:00 - 01:15:00  - Connect to Compute-Node, from Controller
01:15:00 - 01:20:00  - Configure Compute-Node (Agents) to connect w/ Neutron Networking Center
01:20:00 - 01:24:00  - Test Neturon In-Action (Master Install/Compute-Nodes)
01:24:00 - 01:25:00  - Test Horizon In-Action/ Controller/ComputeNode
01:25:00 - 01:37:00  - Q/A / End



==============================================================================
Pre-Requisites:
===================
To Enable Virtualization :
PowerShell (Admin mode) 
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V –All
bcdedit /set hypervisorlaunchtype off
Verify Hypervisorlaunchtype (status : off)
Disable Hyper-V  > 
(Windows key) > Turn windows features on or off > (Uncheck ) Hyper-V checkbox

sudo apt-get install openssh-server
sudo su - #switch to root
passwd 
vi /etc/ssh/sshd_config (PermitRootLogin yes)
service sshd restart

====================================
Step 1: Create 4 VMs
====================================
VM1: Creating our Controller
=========================
Controller Node Networking
/etc/network/interfaces
auto enp0s8
iface enp0s8 inet static
address 10.0.0.8
netmask 255.255.255.0
auto enp0s9
iface enp0s9 inet static
address 203.0.113.8
netmask 255.255.255.0


Controller Node Hosts File
/etc/hosts
10.0.0.9 controller
203.0.113.9 controller-api

10.0.0.10 compute
203.0.113.10 compute-api

10.0.0.11 block1

10.0.0.51 object1
10.0.0.52 object2
 
========================================================
VM2: Creating our Compute
=====================
Compute Node Networking
/etc/network/interfaces
auto enp0s8
iface enp0s8 inet static
address 10.0.0.8
netmask 255.255.255.0
auto enp0s9
iface enp0s9 inet static
address 203.0.113.31
netmask 255.255.255.0
 
Compute Node Hosts File
/etc/hosts
10.0.0.6 controller
203.0.113.11 controller-api
10.0.0.8 compute
203.0.113.31 compute-api
10.0.0.41 block1
10.0.0.51 object1
10.0.0.52 object2
 
  
VM3: Creating our Block Storage Node
=======================================
 
Block Storage Node Networking
/etc/network/interfaces
auto enp0s8
iface enp0s8 inet static
address 10.0.0.41
netmask 255.255.255.0
 
Block Storage Node Hosts File
/etc/hosts
10.0.0.6 controller
203.0.113.11 controller-api
10.0.0.8 compute
203.0.113.31 compute-api
10.0.0.41 block1
10.0.0.51 object1
10.0.0.52 object2
 
  
VM4: Creating our Object Storage Nodes
===================================

Object Storage Node Networking
/etc/network/interfaces (each node)
On object1
auto enp0s8
iface enp0s8 inet static
address 10.0.0.51
netmask 255.255.255.0
On object2
auto enp0s8
iface enp0s8 inet static
address 10.0.0.52
netmask 255.255.255.0
 
Object Storage Node Hosts File
/etc/hosts
10.0.0.6 controller
203.0.113.11 controller-api
10.0.0.8 compute
203.0.113.31 compute-api
10.0.0.41 block1
10.0.0.51 object1
10.0.0.52 object2
 
=================================================================================================
Prepping the Environment
============================ 
Configuring NTP
Controller Node
apt install chrony
nano /etc/chrony/chrony.conf
allow 10.0.0.0/24
service chrony restart
Other Nodes
apt install chrony
nano /etc/chrony/chrony.conf
#pool 2.debian.pool.ntp.org offline iburst

server controller iburst
service chrony restart
chronyc sources

Verify All Nodes
=============================== 
OpenStack Packages (All Nodes)
===============================
apt install software-properties-common
add-apt-repository cloud-archive:pike
add-apt-repository cloud-archive:pike-updates
apt update && apt dist-upgrade
apt install python-openstackclient
============================================

@Controller:: Installing the Database
=========================================
apt install mariadb-server python-pymysql
touch /etc/mysql/mariadb.conf.d/99-openstack.cnf
[mysqld]
bind-address = 10.0.0.9
default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8

service mysql restart
mysql_secure_installation
 
@Controller: Installing the Message Queue
============================================
apt install rabbitmq-server
rabbitmqctl add_user openstack openstack
rabbitmqctl set_permissions openstack ".*" ".*" ".*"
 
@Controller: Installing Memcached
Controller
apt install memcached python-memcache
nano /etc/memcached.conf
#-l 127.0.0.1
-l 10.0.0.9
service memcached restart
   
@Controller: Installing Keystone
================================= 
Database
Update python-pyasn1:
apt install python-pyasn1
Create Keystone database:
mysql
create database keystone;
Grant access:
grant all privileges on keystone.* to 'keystone'@'localhost' identified by 'openstack';
grant all privileges on keystone.* to 'keystone'@'%' identified by 'openstack';
exit
 
Install Components

apt install keystone apache2 libapache2-mod-wsgi
nano /etc/keystone/keystone.conf
[database]
# …
connection = mysql+pymysql://keystone:openstack@controller/keystone
[token]
# …
provider = fernet
su -s /bin/sh -c "keystone-manage db_sync" keystone

Populate the database
Initialize Fernet key repositories
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

Bootstrap Identity Service
keystone-manage bootstrap --bootstrap-password openstack \
--bootstrap-admin-url http://controller:35357/v3/ \
--bootstrap-internal-url http://controller:5000/v3/ \
--bootstrap-public-url http://controller:5000/v3/ \
--bootstrap-region-id RegionOne

Configure Apache
nano /etc/apache2/apache2.conf:
ServerName controller

Restart Apache:
service apache2 restart


Creating Projects, Users and Roles
Set Credentials
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3

Create Base Project
Service Project:
openstack project create --domain default --description "Service Project" service
Demo Project:
openstack project create --domain default --description "Ericsson Cloud Project" demo
 
Creating Projects, Users and Roles
Create the demo user
openstack user create --domain default --password-prompt demo
Create the user role
openstack role create user
Add the user role
openstack role add --project demo --user demo user
 
Verify Installation
Disable Temporary Auth
nano /etc/keystone/keystone-paste.ini:
Remove admin_token_auth from:
[pipeline:public_api]
[pipeline:admin_api]
[pipeline:api_v3]
Unset Environment Variables
unset OS_AUTH_URL OS_PASSWORD
 
Verify Installation
Request Token
Admin / Demo
openstack --os-auth-url http://controller:35357/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-username admin token issue
openstack --os-auth-url http://controller:5000/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name demo --os-username demo token issue
 
Create Credential Files
nano admin-openrc
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

nano demo-openrc
export OS_USERNAME=demo
export OS_PASSWORD=openstack
export OS_PROJECT_NAME=demo
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
 
Using the Credentials Files
Using admin-openrc
. admin-openrc
openstack token issue
Using demo-openrc
. demo-openrc
openstack token issue
 
@Controller: Installing Glance (DB + PKGs + CONFIG)
===================================================
Database
Create Glance Database:
mysql
create database glance;
Grant Access:
grant all privileges on glance.* to 'glance'@'localhost' identified by 'openstack';
grant all privileges on glance.* to 'glance'@'%' identified by 'openstack';
exit
 
Setting up the Glance user
Source Admin Credentials
. admin-openrc
Create the Glance User
openstack user create --domain default --password-prompt glance
Add the Admin Role
openstack role add --project service --user glance admin
 
Setting up the Glance Service and Endpoints
Create the Service
openstack service create --name glance --description "OpenStack Imaging" image

Create the Endpoints
Public/Internal/Admin
openstack endpoint create --region RegionOne image public http://controller:9292
openstack endpoint create --region RegionOne image internal http://controller:9292
openstack endpoint create --region RegionOne image admin http://controller:9292
 
Install Components
apt install glance
nano /etc/glance/glance-api.conf
[database]
# …
connection = mysql+pymysql://glance:openstack@controller/glance
[keystone_authtoken]
# …
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = openstack
 
[paste_deploy]
# …
flavor = keystone
[glance_store]
# …
stores = file,http
default_store = file
filesystem_store_directory = /var/lib/glance/images
 
Configure Glance
nano /etc/glance/glance-registry.conf
[database]
# …
connection = mysql+pymsql://glance:openstack@controller/glance
[keystone_authtoken]
# …
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = openstack
[paste_deploy]
# ...
flavor = keystone
 
Populate the Database
su -s /bin/sh -c "glance-manage db_sync" glance

Finalize Installation
service glance-registry restart
service glance-api restart
 
Verify Glance Installation
=============================
. admin-openrc

Upload Image
wget http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img
openstack image create \
--file cirros-0.3.5-x86_64-disk.img \
--disk-format qcow2 \
–-container-format bare
--public cirros

List Image
openstack image list
    
@Controller: Installing Nova (DB + PKG + CONFIG)
=================================================
Database
Create Nova databases:
mysql
create database nova_api;
create database nova;
create database nova_cell0;
Grant access:
grant all privileges on nova_api.* to 'nova'@'localhost' identified by 'openstack';
grant all privileges on nova_api.* to 'nova'@'%' identified by 'openstack';
grant all privileges on nova.* to 'nova'@'localhost' identified by 'openstack';
grant all privileges on nova.* to 'nova'@'%' identified by 'openstack';
grant all privileges on nova_cell0.* to 'nova'@'localhost' identified by 'openstack';
grant all privileges on nova_cell0.* to 'nova'@'%' identified by 'openstack';
exit
 
Setting up the Nova User
Source Admin Credentials
. admin-openrc
Create the Nova User
openstack user create --domain default --password-prompt nova
Add the Admin Role
openstack role add --project service --user nova admin

Setting up the Nova Service and Endpoints
Create the Service
openstack service create --name nova --description "OpenStack Compute" compute

Create the Endpoints 
Public/Internal/Admin
openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1
 
Setting up the Placement User
Create the Placement User
openstack user create --domain default --password-prompt placement
Add the Admin Role
openstack role add --project service --user placement admin
 
Setting up the Placement Service and Endpoints
Create the Service
openstack service create --name placement --description "Placement API" placement

Create the Endpoints
Public/Internal/Admin
openstack endpoint create --region RegionOne placement public http://controller:8778
openstack endpoint create --region RegionOne placement internal http://controller:8778
openstack endpoint create --region RegionOne placement admin http://controller:8778
 
Install Components
apt install nova-api nova-conductor nova-consoleauth nova-novncproxy 
apt install nova-scheduler nova-placement-api

nano /etc/nova/nova.conf
[api_database]
connection = mysql+pymysql://nova:openstack@controller/nova_api
[database]
connection = mysql+pymysql://nova:openstack@controller/nova
[DEFAULT]
transport_url = rabbit://openstack:openstack@controller
[api]
auth_strategy = keystone
 
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = openstack
[DEFAULT]
my_ip = 10.0.0.6
[DEFAULT]
#log_dir
[DEFAULT]
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver
 
[vnc]
enabled = true
vncserver_listen = $my_ip
vncserver_proxyclient_address = $my_ip
[glance]
api_servers = http://controller:9292
[oslo_concurrency]
lock_path = /var/lib/nova/tmp
[placement]
auth_url = http://controller:35357/v3
os_region_name=RegionOne
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = placement
password = openstack
 
Populate the nova-apidatabase
su -s /bin/sh -c "nova-manage api_db sync" nova

Finalize Installation

service nova-api restart
service nova-consoleauth restart
service nova-scheduler restart
service nova-conductor restart
service nova-novncproxy restart

Register the cell0 databases
su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova

Create the cell1 cell
su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova

Populate the Nova Database
su -s /bin/sh -c "nova-manage db sync" nova
================================================================================================================== 
@Compute: Installing a compute node
======================================
Install Components
apt install nova-compute

nano /etc/nova/nova.conf
[DEFAULT]
transport_url = rabbit://openstack:openstack@controller
[api]
auth_strategy = keystone
 
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = openstack
[DEFAULT]
my_ip = 10.0.0.8
[DEFAULT]
#log_dir
[DEFAULT]
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDrive

[vnc]
enabled = true
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = $my_ip
[glance]
api_servers = http://controller:9292
[oslo_concurrency]
lock_path = /var/lib/nova/tmp
[placement]
auth_url = http://controller:35357/v3
os_region_name=RegionOne
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = placement
password = openstack
 
Check Compute Node Support Acceleration
egrep -c '(vmx|svm)' /proc/cpuinfo
nano/etc/nova/nova-compute.conf
[libvirt]
# ...
virt_type = qemu

Restart Compute Service
service nova-compute restart
=========================================================================== 
@Controller: Add Compute to Cell Database 
Source Admin Credentials
. admin-openrc

List Compute Services
openstack compute service list

Discover Compute Hosts
su -s /bin/sh -c "nova-manage cell_v2 discover_hosts --verbose" nova

Populate the Nova Database
su -s /bin/sh -c "nova-manage db sync" nova
 
Verifying Installation NOVA / List Services & Endpoints
openstack catalog list

@Controller: Installing Horizon
====================== 
Install Components
apt install openstack-dashboard
nano /etc/openstack-dashboard/local_settings.py
OPENSTACK_HOST = "controller"
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = "Default"
ALLOWED_HOSTS = ['*', ]

# SESSION_ENGINE = 'django.contrib.sessions.backends.file' This works as memcached has an issue binding
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
'default': {
'BACKEND':
'django.core.cache.backends.memcached.MemcachedCache',
'LOCATION': '10.0.0.9:11211', }}

OPENSTACK_API_VERSIONS = {
"identity": 3,
"image": 2,
"volume": 2,
}
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True
 

OPENSTACK_NEUTRON_NETWORK = {
...
'enable_router': False,
'enable_quotas': False,
'enable_ipv6': False,
'enable_distributed_router': False,
'enable_ha_router': False,
'enable_lb': False,
'enable_firewall': False,
'enable_vpn': False,
'enable_fip_topology_check': False,

#TIME_ZONE = "TIME_ZONE"

nano /etc/apache2/conf-available/openstackdashboard.conf
WSGIApplicationGroup %{GLOBAL}
Restart compute service
service apache2 reload

===============================
Installing Neutron
=======================
Database
Create Neutron Database:
mysql
create database neutron;
Grant Access:
grant all privileges on neutron.* to 'neutron'@'localhost' identified by 'openstack';
grant all privileges on neutron.* to 'neutron'@'%' identified by 'openstack';
exit
 
Setting up the Neutron User
Source Admin Credentials
. admin-openrc
Create the Neutron User
openstack user create --domain default --password-prompt neutron

Add the Admin Role
openstack role add --project service --user neutron admin
 
Setting up the Neutron Service and Endpoints

Create the Service
openstack service create --name neutron --description "OpenStack Networking Center" network

Create the Endpoints
Public/Internal/Admin
openstack endpoint create --region RegionOne network public http://controller:9696
openstack endpoint create --region RegionOne network internal http://controller:9696
openstack endpoint create --region RegionOne network admin http://controller:9696
 
Install Components
apt install neutron-server neutron-plugin-ml2 neutron-linuxbridge-agent 
neutron-dhcp-agent neutron-metadata-agent
nano /etc/neutron/neutron.conf
[database]
connection = mysql+pymysql://neutron:openstack@controller/neutron
[DEFAULT]
# ...
core_plugin = ml2
service_plugins =
[DEFAULT]
transport_url = rabbit://openstack:openstack@controller
[DEFAULT]
auth_strategy = keystone
 
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = openstack
[DEFAULT]
# ...
notify_nova_on_port_status_changes = true
notify_nova_on_port_data_changes = true
[nova]
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = openstack
 

nano /etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
type_drivers = flat,vlan
tenant_network_types =
mechanism_drivers = linuxbridge
extension_drivers = port_security
[ml2_type_flat]
flat_networks = provider
[securitygroup]
enable_ipset = true
 
nano /etc/neutron/plugins/ml2/linuxbridge_agent.ini
[linux_bridge]
physical_interface_mappings = provider:enp0s9
[vxlan]
enable_vxlan = false
[securitygroup]
# ...
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
 
nano /etc/neutron/dhcp_agent.ini
[DEFAULT]
# ...
interface_driver = linuxbridge
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = true

nano /etc/neutron/metadata_agent.ini
[DEFAULT]
# ...
nova_metadata_host = 10.0.0.9
metadata_proxy_shared_secret = METADATA_SECRET
 
nano /etc/nova/nova.conf
[neutron]
# ...
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = openstack
service_metadata_proxy = true
metadata_proxy_shared_secret = METADATA_SECRET
 
Installing Neutron
Populate the Neutron Database
su -s /bin/sh -c "neutron-db-manage --config-file \
/etc/neutron/neutron.conf --config-file \
/etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron


Finalize Installation
service nova-api restart
service neutron-server restart
service neutron-linuxbridge-agent restart
service neutron-dhcp-agent restart
service neutron-metadata-agent restart
 
Installing a Compute Node
Install Components
apt install neutron-linuxbridge-agent

nano /etc/neutron/neutron.conf
[DEFAULT]
transport_url = rabbit://openstack:openstack@controller
[DEFAULT]
auth_strategy = keystone
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = openstack
 
Installing a Compute Node
nano /etc/neutron/plugins/ml2/linuxbridge_agent.ini
[linux_bridge]
physical_interface_mappings = provider:enp0s9
[vxlan]
enable_vxlan = false
[securitygroup]
# ...
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
 
Installing a Compute Node
nano/etc/nova/nova.conf
[neutron]
# ...
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = openstack

Finalize Installation
service nova-compute restart
service neutron-linuxbridge-agent restart
 
Verifying Installation
Source Credentials
. admin-openrc
List Network Agents
openstack network agent list
 
